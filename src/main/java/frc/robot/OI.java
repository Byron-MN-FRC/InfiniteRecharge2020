// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.commands.AutonomousCommand;
import frc.robot.commands.deployClimbHooks;
import frc.robot.commands.deployNet;
import frc.robot.commands.driveForward;
import frc.robot.commands.driveWithJoyStick;
import frc.robot.commands.driveWithLimeLight;
import frc.robot.commands.pullBuddyUp;
import frc.robot.commands.pullRobotUp;
import frc.robot.commands.shiftDown;
import frc.robot.commands.shiftUp;
import frc.robot.commands.shootBall;
import frc.robot.commands.startAcquisition;
import frc.robot.commands.startShooter;
import frc.robot.commands.stopDrive;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public JoystickButton btnAcquire;
public JoystickButton btnLimeLight;
public JoystickButton btnShiftUp;
public Joystick joystick;
public JoystickButton btnStartShooter;
public JoystickButton btnCilmbHooks;
public JoystickButton btnRobotUp;
public JoystickButton btnShootBall;
public JoystickButton btnDeployNet;
public JoystickButton btnBuddyUp;
public Joystick xBoxController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

xBoxController = new Joystick(1);

btnBuddyUp = new JoystickButton(xBoxController, 8);
btnBuddyUp.whileHeld(new pullBuddyUp());
btnDeployNet = new JoystickButton(xBoxController, 7);
btnDeployNet.whenPressed(new deployNet());
btnShootBall = new JoystickButton(xBoxController, 6);
btnShootBall.whileHeld(new shootBall());
btnRobotUp = new JoystickButton(xBoxController, 1);
btnRobotUp.whileHeld(new pullRobotUp());
btnCilmbHooks = new JoystickButton(xBoxController, 4);
btnCilmbHooks.whenPressed(new deployClimbHooks());
btnStartShooter = new JoystickButton(xBoxController, 5);
btnStartShooter.whileHeld(new startShooter());
joystick = new Joystick(0);

btnShiftUp = new JoystickButton(joystick, 11);
btnShiftUp.whileHeld(new shiftUp());
btnLimeLight = new JoystickButton(joystick, 3);
btnLimeLight.whileHeld(new driveWithLimeLight());
btnAcquire = new JoystickButton(joystick, 2);
btnAcquire.whileHeld(new startAcquisition());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("shiftUp", new shiftUp());
        SmartDashboard.putData("shiftDown", new shiftDown());
        SmartDashboard.putData("driveWithJoyStick", new driveWithJoyStick());
        SmartDashboard.putData("driveForward", new driveForward());
        SmartDashboard.putData("stopDrive", new stopDrive());
        SmartDashboard.putData("startAcquisition", new startAcquisition());
        SmartDashboard.putData("driveWithLimeLight", new driveWithLimeLight());
        SmartDashboard.putData("startShooter", new startShooter());
        SmartDashboard.putData("deployClimbHooks", new deployClimbHooks());
        SmartDashboard.putData("pullRobotUp", new pullRobotUp());
        SmartDashboard.putData("deployNet", new deployNet());
        SmartDashboard.putData("pullBuddyUp", new pullBuddyUp());
        SmartDashboard.putData("shootBall", new shootBall());
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       SmartDashboard.putNumber(Constants.kAmpLimitStr, 2);
       SmartDashboard.putNumber(Constants.kAmpPeakStr,3);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystick() {
        return joystick;
    }

public Joystick getxBoxController() {
        return xBoxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
