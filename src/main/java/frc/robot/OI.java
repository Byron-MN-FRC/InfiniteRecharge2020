// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import frc.robot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    public GetPixyData pixyData;
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public JoystickButton btnAcquire;
public JoystickButton btnStopShooting;
public JoystickButton btnShiftUp;
public JoystickButton btnSpinUp;
public JoystickButton btnStopFlyWheel;
public JoystickButton btnStartShooter;
public JoystickButton btnLimeLightTurn;
public JoystickButton btnShiftDown;
public Joystick joystick;
public JoystickButton btnRobotUp;
public JoystickButton btnDeployLinearSlide;
public JoystickButton btnDeployNet;
public JoystickButton btnBuddyUp;
public Joystick climbJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

climbJoystick = new Joystick(1);

btnBuddyUp = new JoystickButton(climbJoystick, 1);
btnBuddyUp.whileHeld(new pullBuddyUp());
btnDeployNet = new JoystickButton(climbJoystick, 3);
btnDeployNet.whenPressed(new deployNet());
btnDeployLinearSlide = new JoystickButton(climbJoystick, 6);
btnDeployLinearSlide.whenPressed(new deployLinearSlide());
btnRobotUp = new JoystickButton(climbJoystick, 4);
btnRobotUp.whenPressed(new pullRobotUp());
joystick = new Joystick(0);

btnShiftDown = new JoystickButton(joystick, 11);
btnShiftDown.whenReleased(new shiftDown());
btnLimeLightTurn = new JoystickButton(joystick, 3);
btnLimeLightTurn.whenPressed(new LimeLightTurn());
btnStartShooter = new JoystickButton(joystick, 1);
btnStartShooter.whileHeld(new startShooter());
btnStopFlyWheel = new JoystickButton(joystick, 4);
btnStopFlyWheel.whenReleased(new stopFlyWheel());
btnSpinUp = new JoystickButton(joystick, 4);
btnSpinUp.whileHeld(new spinUp());
btnShiftUp = new JoystickButton(joystick, 11);
btnShiftUp.whileHeld(new shiftUp());
btnStopShooting = new JoystickButton(joystick, 1);
btnStopShooting.whenReleased(new stopShooting());
btnAcquire = new JoystickButton(joystick, 2);
btnAcquire.whileHeld(new startAcquisition());

        // SmartDashboard Buttons
        SmartDashboard.putData("indexReverseOne", new indexReverseOne());
        SmartDashboard.putData("test45", new test45());
        SmartDashboard.putData("GetPixyData", new GetPixyData());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    pixyData = new GetPixyData();
    SmartDashboard.putData("Chase", pixyData);
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystick() {
        return joystick;
    }

public Joystick getClimbJoystick() {
        return climbJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

