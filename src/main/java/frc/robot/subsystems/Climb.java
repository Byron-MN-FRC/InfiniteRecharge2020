// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import frc.robot.Constants;
import frc.robot.commands.manualDriveLinearSlide;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Climb extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_VictorSPX buddyWinchBack;
private WPI_VictorSPX buddyWinchFront;
private WPI_TalonSRX hookMotor;
private WPI_TalonSRX winchMotor;
private AnalogInput proximitySensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Climb() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
buddyWinchBack = new WPI_VictorSPX(8);


        
buddyWinchFront = new WPI_VictorSPX(7);


        
hookMotor = new WPI_TalonSRX(15);


        
winchMotor = new WPI_TalonSRX(14);


        
proximitySensor = new AnalogInput(3);
addChild("ProximitySensor",proximitySensor);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    motorConfig();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new manualDriveLinearSlide());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    

    public void stopClimbHook(){
        System.out.println("hook stop");
        hookMotor.set(0);
    }

    public void stopPullRobotUp(){
        System.out.println("up stop");
        winchMotor.set(0);
    }


    public void deployClimbHooks(){
        //hookMotor.set(0.4);
        double hookEncoderUnits = Constants.hookEncoderUnits;
        hookMotor.set(ControlMode.MotionMagic, hookEncoderUnits);

        //double encoderUnits = Constants.catapultVariables.get(target)[4];
             //hookMotor.set(ControlMode.MotionMagic, encoderUnits);
    }

    public void lowerClimbHooks(){
        hookMotor.set(-0.4);
    }

    public void pullRobotUp(){
        winchMotor.set(0.4);
        hookMotor.set(-0.4);
    }

    public void pullBuddyUp(){
        buddyWinchBack.set(0.4);
        buddyWinchFront.set(0.5);
    }
    
    public void driveWithClimbJoystick(Joystick pJoystick){
        double y = -pJoystick.getY();
        hookMotor.set(ControlMode.PercentOutput, y);
    }

    public void motorConfig() {
        /* Factory default hardware to prevent unexpected behavior */
        hookMotor.configFactoryDefault();

        /* Configure Sensor Source for Pirmary PID */
        hookMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, Constants.kPIDLoopIdx,
                Constants.kTimeoutMs);

        /**
         * Configure Talon SRX Output and Sesnor direction accordingly Invert Motor to
         * have green LEDs when driving Talon Forward / Requesting Postiive Output Phase
         * sensor to have positive increment when driving Talon Forward (Green LED)
         */
        hookMotor.setSensorPhase(false); // required to stop 
        hookMotor.setInverted(false);

        /* Set relevant frame periods to be at least as fast as periodic rate */
        hookMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.kTimeoutMs);
        hookMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.kTimeoutMs);

        /* Set the peak and nominal outputs */
        hookMotor.configNominalOutputForward(0, Constants.kTimeoutMs);
        hookMotor.configNominalOutputReverse(0, Constants.kTimeoutMs);
        hookMotor.configPeakOutputForward(1, Constants.kTimeoutMs);
        hookMotor.configPeakOutputReverse(-1, Constants.kTimeoutMs);

        /* Set Motion Magic gains in slot0 - see documentation */
        hookMotor.selectProfileSlot(Constants.kSlot_Turning, Constants.kPIDLoopIdx);
        hookMotor.config_kF(Constants.kSlot_Turning, Constants.kGains_hookMotor.kF, Constants.kTimeoutMs);
        hookMotor.config_kP(Constants.kSlot_Turning, Constants.kGains_hookMotor.kP, Constants.kTimeoutMs);
        hookMotor.config_kI(Constants.kSlot_Turning, Constants.kGains_hookMotor.kI, Constants.kTimeoutMs);
        hookMotor.config_kD(Constants.kSlot_Turning, Constants.kGains_hookMotor.kD, Constants.kTimeoutMs);
        /* Set acceleration and vcruise velocity - see documentation */
        hookMotor.configMotionCruiseVelocity(15000, Constants.kTimeoutMs);
        hookMotor.configMotionAcceleration(6000, Constants.kTimeoutMs);

        /* Zero the sensor */
        hookMotor.setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
    
    
    }   public WPI_TalonSRX getHookMotor() {
        return hookMotor;

    }
    /*
        

    hookMotor.setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs); */
    // }   

    public Boolean atHeight() {
        double currentEncoderUnits = hookMotor.getSelectedSensorPosition(Constants.kPIDLoopIdx);
        double targetEncoderUnits = Constants.hookEncoderUnits;
        if (Math.abs(currentEncoderUnits - targetEncoderUnits)  < 1000) {
            return true;
        }
        return false;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    }
    public int getProximity(){
        return proximitySensor.getValue();
    }
    public AnalogInput proxSenor() {return proximitySensor;}
}

