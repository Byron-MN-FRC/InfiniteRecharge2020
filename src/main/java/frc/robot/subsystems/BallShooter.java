// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Solenoid;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.BallShooterConstants;
import frc.robot.Constants;
import frc.robot.Robot;

/**
 *
 */
public class BallShooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX shootMotor;
private Solenoid coolingSolenoidShooter;
private WPI_TalonSRX hoodMotor;
private DigitalInput limitSwitchDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double prev = 0;
    private double timer = 0;
    private boolean coolingOn = false;

    public BallShooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
shootMotor = new WPI_TalonFX(13);


        
coolingSolenoidShooter = new Solenoid(10, 5);
addChild("coolingSolenoidShooter",coolingSolenoidShooter);

        
hoodMotor = new WPI_TalonSRX(8);


        
limitSwitchDown = new DigitalInput(0);
addChild("limitSwitchDown",limitSwitchDown);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorConfig();
        hoodMotorConfig();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber("Shooter Temp", shootMotor.getTemperature());
        SmartDashboard.putNumber("Shooter Stator Amps", shootMotor.getStatorCurrent());
        SmartDashboard.putNumber("Shooter Velocity",
                -shootMotor.getSelectedSensorVelocity() * 600 / Constants.kSensorUnitsPerRotation);

        if (timer >= 2000) {
            coolMotor();
            timer = 0;
        }

        else {
            timer = timer + 20;
        }
    }
     
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    public void fireMotor() {
        shootMotor.set(-.80);
    }

    public void stopShooter() {
        shootMotor.set(0);
    }

    // public void runBelt() {
    // Robot.ballIndexer.getBeltMotor().set(-.6);
    // }

    public void stopBelt() {
        Robot.ballIndexer.getBeltMotor().set(0);
    }

    public final SupplyCurrentLimitConfiguration currentLimiting = new SupplyCurrentLimitConfiguration(
            Constants.kEnableCurrentLimiting_BS, Constants.currentLimit, Constants.thresholdLimit,
            Constants.thresholdTime);

    public void motorConfig() {
        shootMotor.configFactoryDefault();
        shootMotor.configSupplyCurrentLimit(currentLimiting);
        shootMotor.configOpenloopRamp(2.5, Constants.kTimeoutMs);
        hoodMotorConfig();

    }

    public void coolerTime() {
        
    }

    public void coolMotor() {
        if (shootMotor.getTemperature() > 50) {
            coolingSolenoidShooter.set(true);
            coolingOn = true;
        } else if (coolingOn) {
            coolingSolenoidShooter.set(false);
            coolingOn = false;
        }
    }

    public void reinitializeShooter() {
        coolingSolenoidShooter.set(false);
        coolingOn = false;
        timer = 0;
    }

    public double getShooterRPM() {
        return -shootMotor.getSelectedSensorVelocity() * 600 / Constants.kSensorUnitsPerRotation;

    }
    public Boolean targetEncoder() {
        double currentEncoderUnits = hoodMotor.getSelectedSensorPosition(0);
        if (Math.abs(currentEncoderUnits - BallShooterConstants.kHoodDownEncoderUnits)  < 190) {
            return true;
        }
        return false;
    }
    public void hoodUp(){
        hoodMotor.set(ControlMode.MotionMagic, 650);

    }
    public void hoodDown(){
        hoodMotor.set(ControlMode.MotionMagic, BallShooterConstants.kHoodDownEncoderUnits);
    }
    public double getHoodEncoderUnits(){
        return hoodMotor.getSelectedSensorPosition(650);
    }
    public void stopHoodMotor(){
        hoodMotor.set(0);
       // hoodMotor.setSelectedSensorPosition(0);
    }
    public void hoodMotorConfig() {
        /* Factory default hardware to prevent unexpected behavior */
        hoodMotor.configFactoryDefault();

        /* Configure Sensor Source for Pirmary PID */
        hoodMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, BallShooterConstants.kPIDLoopIdx,
                BallShooterConstants.kTimeoutMs);

        /**
         * Configure Talon SRX Output and Sesnor direction accordingly Invert Motor to
         * have green LEDs when driving Talon Forward / Requesting Postiive Output Phase
         * sensor to have positive increment when driving Talon Forward (Green LED)
         */
        hoodMotor.setSensorPhase(false); // required to stop
        hoodMotor.setInverted(false);

        /* Set relevant frame periods to be at least as fast as periodic rate */
        hoodMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, BallShooterConstants.kTimeoutMs);
        hoodMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, BallShooterConstants.kTimeoutMs);

        /* Set the peak and nominal outputs */
        hoodMotor.configNominalOutputForward(0, BallShooterConstants.kTimeoutMs);
        hoodMotor.configNominalOutputReverse(0, BallShooterConstants.kTimeoutMs);
        hoodMotor.configPeakOutputForward(1, BallShooterConstants.kTimeoutMs);
        hoodMotor.configPeakOutputReverse(-1, BallShooterConstants.kTimeoutMs);

        /* Set Motion Magic gains in slot0 - see documentation */
        hoodMotor.selectProfileSlot(BallShooterConstants.kSlot_Turning, BallShooterConstants.kPIDLoopIdx);
        hoodMotor.config_kF(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kF,
                BallShooterConstants.kTimeoutMs);
        hoodMotor.config_kP(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kP,
                BallShooterConstants.kTimeoutMs);
        hoodMotor.config_kI(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kI,
                BallShooterConstants.kTimeoutMs);
        hoodMotor.config_kD(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kD,
                BallShooterConstants.kTimeoutMs);
        /* Set acceleration and vcruise velocity - see documentation */
        hoodMotor.configMotionCruiseVelocity(150, BallShooterConstants.kTimeoutMs);
        hoodMotor.configMotionAcceleration(150, BallShooterConstants.kTimeoutMs);

        /* Zero the sensor */
        hoodMotor.setSelectedSensorPosition(0, BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kTimeoutMs);

    }
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
