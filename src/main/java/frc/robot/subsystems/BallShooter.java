// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Solenoid;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.BallShooterConstants;
import frc.robot.Constants;
import frc.robot.Robot;

/**
 *
 */
public class BallShooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX shootMotor;
    private Solenoid coolingSolenoidShooter;
    private WPI_TalonSRX hoodMotor;
    private DigitalInput limitSwitchDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double prev = 0;
    private double timer = 0;
    private boolean coolingOn = false;

    /**
     * This is the constructor for the BallShooter subsystem.
     */
    public BallShooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shootMotor = new WPI_TalonFX(13);

        coolingSolenoidShooter = new Solenoid(10, 5);
        addChild("coolingSolenoidShooter", coolingSolenoidShooter);

        hoodMotor = new WPI_TalonSRX(8);

        limitSwitchDown = new DigitalInput(0);
        addChild("limitSwitchDown", limitSwitchDown);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shootMotorConfig();
        hoodMotorConfig();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber("Shooter Temp", shootMotor.getTemperature());
        SmartDashboard.putNumber("Shooter Stator Amps", shootMotor.getStatorCurrent());
        SmartDashboard.putNumber("Shooter Velocity",
                -shootMotor.getSelectedSensorVelocity() * 600 / Constants.kSensorUnitsPerRotation);

        if (timer >= 2000) {
            coolMotor();
            timer = 0;
        }

        else {
            timer = timer + 20;
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    public void fireMotor() {
        shootMotor.set(-.85);
    }

    public void fireMotor(double rpms, double hoodEncoderUnits) {
        double velocityPer100ms = rpms / 600 * Constants.kSensorUnitsPerRotation;
        shootMotor.set(ControlMode.Velocity, velocityPer100ms);
        System.out.println("tgt:" + velocityPer100ms + " err:" + shootMotor.getClosedLoopError(Constants.kPIDLoopIdx));
        System.out.println("fire motor : " + rpms + " hoodenc" + hoodEncoderUnits);
        // hoodMotor.set(ControlMode.Position, hoodEncoderUnits);
    }

    public boolean shooterSpunUp(double rpms, double hoodEncoderUnits) {
        double currentRPMs = Math.abs(shootMotor.getSelectedSensorVelocity() * 600 / Constants.kSensorUnitsPerRotation);
        double currentEncoderUnits = shootMotor.getSelectedSensorPosition(0);
        System.out.println("rpms=" + rpms);
        System.out.println("currentRPMS=" + currentRPMs);
        if ((Math.abs(currentRPMs) - Math.abs(rpms)) < 190) { // close enough to target
            // if (Math.abs(currentEncoderUnits - hoodEncoderUnits) < 190 ) {
            return true;
            // }
        }
        return false;
    }

    public void stopShooter() {
        shootMotor.set(0);
    }

    // public void runBelt() {
    // Robot.ballIndexer.getBeltMotor().set(-.6);
    // }

    public void stopBelt() {
        Robot.ballIndexer.getBeltMotor().set(0);
    }

    public final SupplyCurrentLimitConfiguration currentLimiting = new SupplyCurrentLimitConfiguration(
            Constants.kEnableCurrentLimiting_BS, Constants.currentLimit, Constants.thresholdLimit,
            Constants.thresholdTime);

    public void shootMotorConfig() {
        /* Factory Default all hardware to prevent unexpected behaviour */
        shootMotor.configFactoryDefault();

        /* Config neutral deadband to be the smallest possible */
        shootMotor.configNeutralDeadband(0.001);

        /* Config sensor used for Primary PID [Velocity] */
        shootMotor.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, Constants.kPIDLoopIdx,
                Constants.kTimeoutMs);

        /* Config the peak and nominal outputs */
        shootMotor.configNominalOutputForward(0, Constants.kTimeoutMs);
        shootMotor.configNominalOutputReverse(0, Constants.kTimeoutMs);
        shootMotor.configPeakOutputForward(1, Constants.kTimeoutMs);
        shootMotor.configPeakOutputReverse(-1, Constants.kTimeoutMs);

        /* Config the Velocity closed loop gains in slot0 */
        shootMotor.config_kF(Constants.kPIDLoopIdx, BallShooterConstants.kGains_shootMotor.kF, Constants.kTimeoutMs);
        shootMotor.config_kP(Constants.kPIDLoopIdx, BallShooterConstants.kGains_shootMotor.kP, Constants.kTimeoutMs);
        shootMotor.config_kI(Constants.kPIDLoopIdx, BallShooterConstants.kGains_shootMotor.kI, Constants.kTimeoutMs);
        shootMotor.config_kD(Constants.kPIDLoopIdx, BallShooterConstants.kGains_shootMotor.kD, Constants.kTimeoutMs);
        /*
         * Talon FX does not need sensor phase set for its integrated sensor This is
         * because it will always be correct if the selected feedback device is
         * integrated sensor (default value) and the user calls getSelectedSensor* to
         * get the sensor's position/velocity.
         * 
         * https://phoenix-documentation.readthedocs.io/en/latest/ch14_MCSensor.html#
         * sensor-phase
         */
        // shootMotor.setSensorPhase(true);

        // Ramp motor w/ current limiting on
        shootMotor.configSupplyCurrentLimit(currentLimiting);
        shootMotor.configOpenloopRamp(1.75, Constants.kTimeoutMs);
        hoodMotorConfig();

    }

    public void coolerTime() {

    }

    public void coolMotor() {
        if (shootMotor.getTemperature() > 50) {
            coolingSolenoidShooter.set(true);
            coolingOn = true;
        } else if (coolingOn) {
            coolingSolenoidShooter.set(false);
            coolingOn = false;
        }
    }

    public void reinitializeShooter() {
        shootMotorConfig(); // temporary
        coolingSolenoidShooter.set(false);
        coolingOn = false;
        timer = 0;
        hoodMotor.setSelectedSensorPosition(0, BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kTimeoutMs);

    }

    public double getShooterRPM() {
        return -shootMotor.getSelectedSensorVelocity() * 600 / Constants.kSensorUnitsPerRotation;

    }

    public Boolean targetEncoder() {
        double currentEncoderUnits = hoodMotor.getSelectedSensorPosition(0);
        if (Math.abs(currentEncoderUnits - BallShooterConstants.kHoodUpEncoderUnits) < 190) {
            return true;
        }
        return false;
    }

    public void hoodUp() {
        hoodMotor.set(ControlMode.MotionMagic, BallShooterConstants.kHoodUpEncoderUnits);

    }

    public void hoodDown() {
        hoodMotor.set(ControlMode.MotionMagic, 0);
    }

    public double getHoodEncoderUnits() {
        return hoodMotor.getSelectedSensorPosition(0);
    }

    public void stopHoodMotor() {
        hoodMotor.set(0);
        // hoodMotor.setSelectedSensorPosition(0);
    }

    public void hoodMotorConfig() {
        /* Factory default hardware to prevent unexpected behavior */
        hoodMotor.configFactoryDefault();

        /* Configure Sensor Source for Pirmary PID */
        hoodMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,
                BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kTimeoutMs);

        /**
         * Configure Talon SRX Output and Sesnor direction accordingly Invert Motor to
         * have green LEDs when driving Talon Forward / Requesting Postiive Output Phase
         * sensor to have positive increment when driving Talon Forward (Green LED)
         */
        hoodMotor.setSensorPhase(false); // required to stop
        hoodMotor.setInverted(false);

        /* Set relevant frame periods to be at least as fast as periodic rate */
        hoodMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, BallShooterConstants.kTimeoutMs);
        hoodMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, BallShooterConstants.kTimeoutMs);

        /* Set the peak and nominal outputs */
        hoodMotor.configNominalOutputForward(0, BallShooterConstants.kTimeoutMs);
        hoodMotor.configNominalOutputReverse(0, BallShooterConstants.kTimeoutMs);
        hoodMotor.configPeakOutputForward(1, BallShooterConstants.kTimeoutMs);
        hoodMotor.configPeakOutputReverse(-1, BallShooterConstants.kTimeoutMs);

        /* Set Motion Magic gains in slot0 - see documentation */
        hoodMotor.selectProfileSlot(BallShooterConstants.kSlot_Turning, BallShooterConstants.kPIDLoopIdx);
        hoodMotor.config_kF(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kF,
                BallShooterConstants.kTimeoutMs);
        hoodMotor.config_kP(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kP,
                BallShooterConstants.kTimeoutMs);
        hoodMotor.config_kI(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kI,
                BallShooterConstants.kTimeoutMs);
        hoodMotor.config_kD(BallShooterConstants.kSlot_Turning, BallShooterConstants.kGains_hoodMotor.kD,
                BallShooterConstants.kTimeoutMs);
        /* Set acceleration and vcruise velocity - see documentation */
        hoodMotor.configMotionCruiseVelocity(150, BallShooterConstants.kTimeoutMs);
        hoodMotor.configMotionAcceleration(150, BallShooterConstants.kTimeoutMs);

        /* Zero the sensor */
        hoodMotor.setSelectedSensorPosition(0, BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kTimeoutMs);

    }

    public boolean isLimitSwitchDown() {
        return !limitSwitchDown.get();
    }

    /**
     * Given velocity in rotations per minute (rpm), rpmToVelocityPer100ms calculates and returns 
     * the velocity in encoder units per 100ms
     * 
     * @param rpm - Motor Rotations per minute
     * @return - Encoder units per 100ms
     */
    public double rpmToVelocityPer100ms(double rpm) {
        return rpm / 600 * BallShooterConstants.kSensorUnitsPerRotation;
    }

    /**
     * Given velocity in encoder units per second, velocityPer100msToRpm calculates and
     * returns the velocity in rotations per minute (rpm)
     * @param velPer100ms
     * @return
     */
    public double velocityPer100msToRpm(double velPer100ms) {
        return velPer100ms / BallShooterConstants.kSensorUnitsPerRotation * 600;
    }
}

