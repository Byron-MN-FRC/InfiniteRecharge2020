// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.InvertType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import frc.robot.commands.driveWithJoyStick;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX leftSlaveFalcon;
    private WPI_TalonFX rightSlaveFalcon;
    private DoubleSolenoid shifter;
    private WPI_TalonFX rightMasterFalcon;
    private WPI_TalonFX leftMasterFalcon;
    private DifferentialDrive tankDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double limitedJoystick = 0;
    private double y = 0;
    private double twist = 0;

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftSlaveFalcon = new WPI_TalonFX(0);

        rightSlaveFalcon = new WPI_TalonFX(2);

        shifter = new DoubleSolenoid(0, 4, 5);
        addChild("shifter", shifter);

        rightMasterFalcon = new WPI_TalonFX(3);

        leftMasterFalcon = new WPI_TalonFX(1);

        tankDrive = new DifferentialDrive(leftMasterFalcon, rightMasterFalcon);
        addChild("tankDrive", tankDrive);
        tankDrive.setSafetyEnabled(true);
        tankDrive.setExpiration(0.1);
        tankDrive.setMaxOutput(1.0);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorConfig();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new driveWithJoyStick());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    public void driveWithJoystick(Joystick joystickP0) {
        y = -joystickP0.getY();
        twist = joystickP0.getTwist();
        double change = y - limitedJoystick;
        if (change > 0.01) {
            change = 0.01;
        } else if (change < -0.01) {
            change = -0.01;
        }
        limitedJoystick += change;
        tankDrive.arcadeDrive(limitedJoystick, twist);
    }

    private void motorConfig() {
        rightSlaveFalcon.follow(rightMasterFalcon);
        rightMasterFalcon.setInverted(false);
        rightSlaveFalcon.setInverted(InvertType.FollowMaster);
        leftSlaveFalcon.follow(leftMasterFalcon);
        leftMasterFalcon.setInverted(true);
        leftSlaveFalcon.setInverted(false);
        leftSlaveFalcon.setInverted(InvertType.FollowMaster);
    }

    public void driveForward() {
        rightMasterFalcon.set(.3);
        leftMasterFalcon.set(.3);
    }

    public void stop() {
        rightMasterFalcon.set(0);
        leftMasterFalcon.set(0);
    }

    public void shiftUp() {
        shifter.set(Value.kForward);
    }

    public void shiftDown() {
        shifter.set(Value.kReverse);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
}
